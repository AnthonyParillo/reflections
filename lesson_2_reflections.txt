1.

Q: What happens when you initialize a repository? Why do you need to do it?

A: It Initialized and empty Git repository. It is needed so we can initiate a version 
control for our reflections. 

2.

Q: How is the staging area different from the working directory and the repository? 
What value do you think it offers?

A: Repository is the full "folder" of files in the git repo that was initiated/created. 
The Working Directory is where the repository or current commit that is "checked out" is 
being worked on. Staging Area is a place inbetween like a "limbo" before you "commit" to 
changes to commit/working directory you are making changes to inside the repository. 

The staging area allows you to group files to one commit and also decide if the files
are the correct files before you "commit" to the changing the commit currently being 
worked on.

3.

Q: How can you use the staging area to make sure you have one commit per logical change?

A: By comparing both the staging area to current commit in the repository and to the working 
directory.

4.

Q: What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

A: If multiple people are working on multiple parts of one file, branches would 
help to keep the master branch clean from breaks or glitches. Also, it would help 
with being able to experiment.

5.

Q: How do the diagrams help you visualize the branch structure?

A: Diagram help understand where each branch currently is and if it was merged or not. 
Also, it helps a team understand where each branch currently is.

6.

Q: What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

A: Merging two branches together allow for all changes from one commit to be together 
with another commit. We represent it in a diagram so that we can see what will be 
included and will not be included.

7.

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A: Pros: It is quicker than going through code personally and copy/paste all changes 
and it can list differences during a merge. Cons: Merge could break something or 
something could be lost or not merged that needed to be in the merge.