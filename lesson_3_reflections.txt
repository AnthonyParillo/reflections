1.

Q: When would you want to use a remote repository rather than keeping all your work local?

A: You should probably use a remote repository if you are on a work computer or some other
computer that is not your own. 

2.

Q: Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

A: Pulling manually brings changes into your current local repository almost like a merge.
If Git stayed up-to-date with remote then changes from local not pushed yet would be lost.

3.

Q: Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

A: 

"Forks" pertain to a repository on GitHub that you do not have rights to. Forking allows
anyone to pull a copy of a repository to their GitHub account to modify without repercussions
or hindering the other original repository from the owner. Forks can be used when a person 
wants to collaborate with the open source repository or when they want to modify it to make
a version of their own. 

"Clones" pertain to making a exact current copy of a local or remote repository. Clones
can be used same way as forks, but, instead of the way forks work, they are local or from
a repository you have access to remotely or local. Also, it would be good to use clones to 
make a copy of a repository to either backup or to use for an experiment to keep original 
clean of too many branches or commits. This clone is a completely different/new repository
from the original.

"Branches" pertain to a "side project" or "off-shoot" of a repository local or remote. A branch
is an exact copy of the master repository with new commits that follow only that the new route
or "branch" that is made. It is kept track of through git commits and will not be part of the 
"master" branch until merged. This allows for changes to be experimented with the original
"master" branch without breaking the "master" branch. Branches can be used locally to change
certain things in the repository before committing them. Upon merging the master to the new 
branch, the old branch becomes one with the master and continues on. 

In summary, a fork is a clone/branch/copy from a repository on GitHub that is not yours and
is brought to your GitHub as a new repository to be modified. A clone is a exact copy of a
repository that you have on GitHub(remote) or local that can stay on GitHub or brought 
locally then modified but still becomes a new repository where it is stored. A branch is 
a copy of the current repository's branch/commit being worked in that can be modified within 
the repository but does not become a new repository.

4.

Q: What is the benefit of having a copy of the last known state of the remote stored locally?

A: Having a copy of the last known state of the remote stored locally allows one to know
where they left off without clutter from other changes that have been made to the remote
already. Also, this will allow for ease of merging and to know what to keep or get rid of
before the merge is committed compared to the local or ones work. 

5.

Q: How would you collaborate without using Git or GitHub? What would be easier, and 
what would be harder?

A: There are many alternates to Git and GitHub(just saying......)..... but I know that is 
not what is being asked and for the real answer....
Collaboration without Git or GitHub would be very difficult. If there was not a form of
version control used it would be difficut to keep up with who was doing what and what has 
been changed or implemented.  Bugs and breaks in the code would be rampant and trying to 
fix one file would take a very long time to go line-by-line. Going to one collaborator to 
the next trying to find out what they did would get aggravating without good management.
This could be done if you had code and close nit group/team where each person was only to
work on a certain amount of lines. At the end of a given period, someone would have to 
review and piece together everything and determine which changes should be implicated or
not into the end product. Very small changes could be done without version control, but 
large changes would be more difficult. Version control helps to contain and prevent
breaks in the master code.

6.

Q: When would you want to make changes in a separate branch rather than directly in 
master? What benefits does each approach have?

A: Making changes in a seperate branch is best when you do not want to break or mess with
the master branch. i.e. experiments or just playing around with the code. It is always a good
idea to make a branch and leave the master alone until it is guaranteed whatever was changed
should be implemented into the final product. Master should be used to make small changes to
things that absolutely will not affect the final product. This keeps things clean without too
many commits.

